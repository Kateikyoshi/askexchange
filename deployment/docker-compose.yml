version: '3'
services:
  askexchange:
    image: askexchange_app_ktor:0.0.1
    container_name: askexchange_ktor
    ports:
      - "8080:8080"
    expose:
      - "8080"
    #When building an image, pay attention to issuer and certUrl in application.yml, since env variables
    #won't overwrite them. Also pay attention to the issuer, it is checked as a string
    #so it won't work when set as "keycloak"
    environment:
      SQL_URL: jdbc:postgresql://psql:5432/askexchange_postgre_db
      jwt.issuer: http://127.0.0.1:8180/realms/askexch
      jwt.audience: account
      jwt.realm: askexch
      jwt.clientId: hateful-client
      jwt.certUrl: http://keycloak:8180/realms/askexch/protocol/openid-connect/certs
    depends_on:
      psql:
        condition: service_healthy
      fluent-bit:
        condition: service_started
    networks:
      - opensearch-net
  psql:
    image: postgres:15.2-alpine
    container_name: askexchange_postgre
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    expose:
      - "5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: askexchange_postgre_db
      PGUSER: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - opensearch-net

#https://hub.docker.com/r/jboss/keycloak/
  keycloak:
    #image: quay.io/keycloak/keycloak:21.1.1
    build:
      dockerfile: ./configs/keycloak/Dockerfile
    container_name: dagger
    command:
      #- import --file=/tmp/askexch-realm.json
      #- ./mkdir /opt/keycloak/data/import
      #- cp /tmp/askexch-realm.json /opt/keycloak/data/import
      - start-dev --http-port=8180 --import-realm
    ports:
      - "8180:8180"
      - "8082:9990"
    expose:
      - "8081"
      - "8180"
    volumes:
      - ./configs/keycloak:/tmp
    environment:
      KEYCLOAK_ADMIN: ifrit
      KEYCLOAK_ADMIN_PASSWORD: shiva
    networks:
      - opensearch-net
      #configured "askexch" realm containing "hateful-client" client with mapped group claim and "dragon" user with "shiva" password
      #clients-> clients list-> hateful-client-> client scopes-> hateful-client dedicated-> groups mapper custom field
      #KEYCLOAK_IMPORT: "/tmp/askexch-realm2.json"


#  nginx:
#    image: nginx:latest
#    ports:
#      - "8080:80"
#    depends_on:
#      - fluent-bitT
#    volumes:
#      - ./configs/nginx/default.conf:/etc/nginx/conf.d/default.conf
#      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
#    logging:
#      driver: "fluentd"
#      options:
#        # плагин forward
#        fluentd-address: localhost:24224
#        tag: nginx.logs

  fluent-bit:
    container_name: fluent-bot
    image: fluent/fluent-bit
    ports:
      # forward plugin (fluent-bit.conf)
      - "24224:24224"
      - "24224:24224/udp"
      - "2020:2020"
    environment:
      - opensearch_host=opensearch-nodeA
      - opensearch_user=admin
      - opensearch_pass=admin
    volumes:
      - ./configs/fluent/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./configs/fluent/parsers.conf:/fluent-bit/etc/parsers.conf
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
#https://logz.io/blog/opensearch-clusters-tutorial/
#https://opensearch.org/docs/1.3/install-and-configure/install-opensearch/docker/
  #damn virtual machine has no VRAM for clusters
  opensearch-nodeA: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-nodeA/)
    image: opensearchproject/opensearch:latest
    container_name: opensearch-nodeA
    environment:
      - discovery.type=single-node
      #- cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-nodeA # Name the node that will run in this container
      #- discovery.seed_hosts=opensearch-nodeA,opensearch-nodeB,opensearch-nodeC # Nodes to look for when discovering the cluster
      #- cluster.initial_master_nodes=opensearch-nodeA,opensearch-nodeB
      - bootstrap.memory_lock=true # along with the memlock settings below # Disable JVM heap memory swapping
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Set min and max JVM heap sizes to at least 50% of system RAM
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - "9200:9200" # REST API
      - "9600:9600" # Performance Analyzer
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
  opensearch-thrashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-trashboards
    ports:
      - "5601:5601"
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      #OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
      OPENSEARCH_HOSTS: '["https://opensearch-nodeA:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - opensearch-net #same network for everyone!!!
    depends_on:
      - opensearch-nodeA

volumes:
  opensearch-data1:
  postgres_data:

networks:
  opensearch-net: